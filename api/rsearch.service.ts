/**
 * ParallelStack RSearch API
 * REST API Specification for ParallelStack RSearch API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: team@parallelstack.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { InlineResponse200 } from '../model/inlineResponse200';
import { InlineResponse2001 } from '../model/inlineResponse2001';
import { InlineResponse2002 } from '../model/inlineResponse2002';
import { InlineResponse2003 } from '../model/inlineResponse2003';
import { InlineResponse2004 } from '../model/inlineResponse2004';
import { InlineResponse2005 } from '../model/inlineResponse2005';
import { InlineResponse2006 } from '../model/inlineResponse2006';
import { InlineResponse2007 } from '../model/inlineResponse2007';
import { InlineResponse2008 } from '../model/inlineResponse2008';
import { InlineResponse2009 } from '../model/inlineResponse2009';
import { InlineResponse201 } from '../model/inlineResponse201';
import { InlineResponse2011 } from '../model/inlineResponse2011';
import { InlineResponse202 } from '../model/inlineResponse202';
import { InlineResponse400 } from '../model/inlineResponse400';
import { InlineResponse4001 } from '../model/inlineResponse4001';
import { InlineResponse4002 } from '../model/inlineResponse4002';
import { InlineResponse4003 } from '../model/inlineResponse4003';
import { InlineResponse4004 } from '../model/inlineResponse4004';
import { InlineResponse4005 } from '../model/inlineResponse4005';
import { InlineResponse4006 } from '../model/inlineResponse4006';
import { InlineResponse4007 } from '../model/inlineResponse4007';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class RsearchService {

    protected basePath = 'https://api.parallelstack.com/api/rsearch/v1';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * Creates &#x60;doc_id&#x60; in &#x60;doc_type_name&#x60; for &#x60;index_name&#x60;
     * @param indexName Name of the index
     * @param docTypeName Name of the document_type
     * @param docId Document ID
     * @param documentDetails Details of the document
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addDocument(indexName: string, docTypeName: string, docId: string, documentDetails: any, observe?: 'body', reportProgress?: boolean): Observable<InlineResponse2006>;
    public addDocument(indexName: string, docTypeName: string, docId: string, documentDetails: any, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse2006>>;
    public addDocument(indexName: string, docTypeName: string, docId: string, documentDetails: any, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse2006>>;
    public addDocument(indexName: string, docTypeName: string, docId: string, documentDetails: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (indexName === null || indexName === undefined) {
            throw new Error('Required parameter indexName was null or undefined when calling addDocument.');
        }
        if (docTypeName === null || docTypeName === undefined) {
            throw new Error('Required parameter docTypeName was null or undefined when calling addDocument.');
        }
        if (docId === null || docId === undefined) {
            throw new Error('Required parameter docId was null or undefined when calling addDocument.');
        }
        if (documentDetails === null || documentDetails === undefined) {
            throw new Error('Required parameter documentDetails was null or undefined when calling addDocument.');
        }

        let headers = this.defaultHeaders;

        // authentication (authToken) required
        if (this.configuration.apiKeys["auth_token"]) {
            queryParameters = queryParameters.set('auth_token', this.configuration.apiKeys["auth_token"]);
        }

        // authentication (writeAppID) required
        if (this.configuration.apiKeys["X-RSearch-App-ID"]) {
            headers = headers.set('X-RSearch-App-ID', this.configuration.apiKeys["X-RSearch-App-ID"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<InlineResponse2006>(`${this.basePath}/indexes/${encodeURIComponent(String(indexName))}/document_types/${encodeURIComponent(String(docTypeName))}/documents/${encodeURIComponent(String(docId))}`,
            documentDetails,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Creates specific &#x60;document_type&#x60; in &#x60;index_name&#x60; with specified parameters
     * @param indexName Name of the index
     * @param docTypeName Name of the document_type
     * @param docTypeDetails Details of the document_type
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addDocumentType(indexName: string, docTypeName: string, docTypeDetails: any, observe?: 'body', reportProgress?: boolean): Observable<InlineResponse2011>;
    public addDocumentType(indexName: string, docTypeName: string, docTypeDetails: any, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse2011>>;
    public addDocumentType(indexName: string, docTypeName: string, docTypeDetails: any, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse2011>>;
    public addDocumentType(indexName: string, docTypeName: string, docTypeDetails: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (indexName === null || indexName === undefined) {
            throw new Error('Required parameter indexName was null or undefined when calling addDocumentType.');
        }
        if (docTypeName === null || docTypeName === undefined) {
            throw new Error('Required parameter docTypeName was null or undefined when calling addDocumentType.');
        }
        if (docTypeDetails === null || docTypeDetails === undefined) {
            throw new Error('Required parameter docTypeDetails was null or undefined when calling addDocumentType.');
        }

        let headers = this.defaultHeaders;

        // authentication (authToken) required
        if (this.configuration.apiKeys["auth_token"]) {
            queryParameters = queryParameters.set('auth_token', this.configuration.apiKeys["auth_token"]);
        }

        // authentication (readAppID) required
        if (this.configuration.apiKeys["X-RSearch-App-ID"]) {
            headers = headers.set('X-RSearch-App-ID', this.configuration.apiKeys["X-RSearch-App-ID"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<InlineResponse2011>(`${this.basePath}/indexes/${encodeURIComponent(String(indexName))}/document_types/${encodeURIComponent(String(docTypeName))}`,
            docTypeDetails,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Creates &#x60;a new index&#x60;
     * @param indexName Name of the index
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addIndex(indexName: string, observe?: 'body', reportProgress?: boolean): Observable<InlineResponse201>;
    public addIndex(indexName: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse201>>;
    public addIndex(indexName: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse201>>;
    public addIndex(indexName: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (indexName === null || indexName === undefined) {
            throw new Error('Required parameter indexName was null or undefined when calling addIndex.');
        }

        let headers = this.defaultHeaders;
        
		// authentication (authToken) required
        if (this.configuration.apiKeys["auth_token"]) {
            queryParameters = queryParameters.set('auth_token', this.configuration.apiKeys["auth_token"]);
        }

        // authentication (writeAppID) required
        if (this.configuration.apiKeys["X-RSearch-App-ID"]) {
            headers = headers.set('X-RSearch-App-ID', this.configuration.apiKeys["X-RSearch-App-ID"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.post<InlineResponse201>(`${this.basePath}/indexes/${encodeURIComponent(String(indexName))}`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Deletes &#x60;doc_id&#x60; in &#x60;doc_type_name&#x60; for &#x60;index_name&#x60;
     * @param indexName Name of the index
     * @param docTypeName Name of the document_type
     * @param docId Document ID
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteDocument(indexName: string, docTypeName: string, docId: string, observe?: 'body', reportProgress?: boolean): Observable<InlineResponse2007>;
    public deleteDocument(indexName: string, docTypeName: string, docId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse2007>>;
    public deleteDocument(indexName: string, docTypeName: string, docId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse2007>>;
    public deleteDocument(indexName: string, docTypeName: string, docId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (indexName === null || indexName === undefined) {
            throw new Error('Required parameter indexName was null or undefined when calling deleteDocument.');
        }
        if (docTypeName === null || docTypeName === undefined) {
            throw new Error('Required parameter docTypeName was null or undefined when calling deleteDocument.');
        }
        if (docId === null || docId === undefined) {
            throw new Error('Required parameter docId was null or undefined when calling deleteDocument.');
        }

        let headers = this.defaultHeaders;

        // authentication (authToken) required
        if (this.configuration.apiKeys["auth_token"]) {
            queryParameters = queryParameters.set('auth_token', this.configuration.apiKeys["auth_token"]);
        }

        // authentication (writeAppID) required
        if (this.configuration.apiKeys["X-RSearch-App-ID"]) {
            headers = headers.set('X-RSearch-App-ID', this.configuration.apiKeys["X-RSearch-App-ID"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.delete<InlineResponse2007>(`${this.basePath}/indexes/${encodeURIComponent(String(indexName))}/document_types/${encodeURIComponent(String(docTypeName))}/documents/${encodeURIComponent(String(docId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Deletes &#x60;an index&#x60; {index_name}
     * @param indexName Name of the index
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteIndex(indexName: string, observe?: 'body', reportProgress?: boolean): Observable<InlineResponse202>;
    public deleteIndex(indexName: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse202>>;
    public deleteIndex(indexName: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse202>>;
    public deleteIndex(indexName: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (indexName === null || indexName === undefined) {
            throw new Error('Required parameter indexName was null or undefined when calling deleteIndex.');
        }

        let headers = this.defaultHeaders;

        // authentication (authToken) required
        if (this.configuration.apiKeys["auth_token"]) {
            queryParameters = queryParameters.set('auth_token', this.configuration.apiKeys["auth_token"]);
        }

        // authentication (writeAppID) required
        if (this.configuration.apiKeys["X-RSearch-App-ID"]) {
            headers = headers.set('X-RSearch-App-ID', this.configuration.apiKeys["X-RSearch-App-ID"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.delete<InlineResponse202>(`${this.basePath}/indexes/${encodeURIComponent(String(indexName))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Advanced Search which gets all documents in &#x60;index_name&#x60; for provided search criteria
     * @param indexName Name of the index
     * @param docTypeName Name of the Document)type
     * @param search Details of the search query
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAdvancedSearchResults(indexName: string, docTypeName: string, search: any, observe?: 'body', reportProgress?: boolean): Observable<InlineResponse2008>;
    public getAdvancedSearchResults(indexName: string, docTypeName: string, search: any, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse2008>>;
    public getAdvancedSearchResults(indexName: string, docTypeName: string, search: any, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse2008>>;
    public getAdvancedSearchResults(indexName: string, docTypeName: string, search: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (indexName === null || indexName === undefined) {
            throw new Error('Required parameter indexName was null or undefined when calling getAdvancedSearchResults.');
        }
        if (docTypeName === null || docTypeName === undefined) {
            throw new Error('Required parameter docTypeName was null or undefined when calling getAdvancedSearchResults.');
        }
        if (search === null || search === undefined) {
            throw new Error('Required parameter search was null or undefined when calling getAdvancedSearchResults.');
        }

        let headers = this.defaultHeaders;

        // authentication (authToken) required
        if (this.configuration.apiKeys["auth_token"]) {
            queryParameters = queryParameters.set('auth_token', this.configuration.apiKeys["auth_token"]);
        }

        // authentication (writeAppID) required
        if (this.configuration.apiKeys["X-RSearch-App-ID"]) {
            headers = headers.set('X-RSearch-App-ID', this.configuration.apiKeys["X-RSearch-App-ID"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<InlineResponse2008>(`${this.basePath}/indexes/${encodeURIComponent(String(indexName))}/document_types/${encodeURIComponent(String(docTypeName))}/search`,
            search,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Gets &#x60;All document_types&#x60; present in &#x60;index_name&#x60;
     * @param indexName Name of the index
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllDocumentTypes(indexName: string, observe?: 'body', reportProgress?: boolean): Observable<InlineResponse2002>;
    public getAllDocumentTypes(indexName: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse2002>>;
    public getAllDocumentTypes(indexName: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse2002>>;
    public getAllDocumentTypes(indexName: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (indexName === null || indexName === undefined) {
            throw new Error('Required parameter indexName was null or undefined when calling getAllDocumentTypes.');
        }

        let headers = this.defaultHeaders;

        // authentication (authToken) required
        if (this.configuration.apiKeys["auth_token"]) {
            queryParameters = queryParameters.set('auth_token', this.configuration.apiKeys["auth_token"]);
        }

        // authentication (readAppID) required
        if (this.configuration.apiKeys["X-RSearch-App-ID"]) {
            headers = headers.set('X-RSearch-App-ID', this.configuration.apiKeys["X-RSearch-App-ID"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<InlineResponse2002>(`${this.basePath}/indexes/${encodeURIComponent(String(indexName))}/document_types`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Fetches all documents in &#x60;doc_type_name&#x60; for &#x60;index_name&#x60;
     * @param indexName Name of the index
     * @param docTypeName Name of the document_type
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllDocuments(indexName: string, docTypeName: string, observe?: 'body', reportProgress?: boolean): Observable<InlineResponse2004>;
    public getAllDocuments(indexName: string, docTypeName: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse2004>>;
    public getAllDocuments(indexName: string, docTypeName: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse2004>>;
    public getAllDocuments(indexName: string, docTypeName: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (indexName === null || indexName === undefined) {
            throw new Error('Required parameter indexName was null or undefined when calling getAllDocuments.');
        }
        if (docTypeName === null || docTypeName === undefined) {
            throw new Error('Required parameter docTypeName was null or undefined when calling getAllDocuments.');
        }

        let headers = this.defaultHeaders;

        // authentication (authToken) required
        if (this.configuration.apiKeys["auth_token"]) {
            queryParameters = queryParameters.set('auth_token', this.configuration.apiKeys["auth_token"]);
        }

        // authentication (readAppID) required
        if (this.configuration.apiKeys["X-RSearch-App-ID"]) {
            headers = headers.set('X-RSearch-App-ID', this.configuration.apiKeys["X-RSearch-App-ID"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<InlineResponse2004>(`${this.basePath}/indexes/${encodeURIComponent(String(indexName))}/document_types/${encodeURIComponent(String(docTypeName))}/documents`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Fetches &#x60;All indexes&#x60;
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllIndexes(observe?: 'body', reportProgress?: boolean): Observable<InlineResponse200>;
    public getAllIndexes(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse200>>;
    public getAllIndexes(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse200>>;
    public getAllIndexes(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (authToken) required
        if (this.configuration.apiKeys["auth_token"]) {
            queryParameters = queryParameters.set('auth_token', this.configuration.apiKeys["auth_token"]);
        }

        // authentication (readAppID) required
        if (this.configuration.apiKeys["X-RSearch-App-ID"]) {
            headers = headers.set('X-RSearch-App-ID', this.configuration.apiKeys["X-RSearch-App-ID"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<InlineResponse200>(`${this.basePath}/indexes`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Basic Search which gets all documents in &#x60;index_name&#x60; for provided search criteria
     * @param indexName Name of the index
     * @param q Search Query
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getBasicSearchResults(indexName: string, q: string, observe?: 'body', reportProgress?: boolean): Observable<InlineResponse2008>;
    public getBasicSearchResults(indexName: string, q: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse2008>>;
    public getBasicSearchResults(indexName: string, q: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse2008>>;
    public getBasicSearchResults(indexName: string, q: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (indexName === null || indexName === undefined) {
            throw new Error('Required parameter indexName was null or undefined when calling getBasicSearchResults.');
        }
        if (q === null || q === undefined) {
            throw new Error('Required parameter q was null or undefined when calling getBasicSearchResults.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (q !== undefined) {
            queryParameters = queryParameters.set('q', <any>q);
        }

        let headers = this.defaultHeaders;

        // authentication (authToken) required
        if (this.configuration.apiKeys["auth_token"]) {
            queryParameters = queryParameters.set('auth_token', this.configuration.apiKeys["auth_token"]);
        }

        // authentication (readAppID) required
        if (this.configuration.apiKeys["X-RSearch-App-ID"]) {
            headers = headers.set('X-RSearch-App-ID', this.configuration.apiKeys["X-RSearch-App-ID"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<InlineResponse2008>(`${this.basePath}/indexes/${encodeURIComponent(String(indexName))}/search`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Fetches details of &#x60;doc_id&#x60; in &#x60;doc_type_name&#x60; for &#x60;index_name&#x60;
     * @param indexName Name of the index
     * @param docTypeName Name of the document_type
     * @param docId Document ID
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getDocument(indexName: string, docTypeName: string, docId: string, observe?: 'body', reportProgress?: boolean): Observable<InlineResponse2005>;
    public getDocument(indexName: string, docTypeName: string, docId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse2005>>;
    public getDocument(indexName: string, docTypeName: string, docId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse2005>>;
    public getDocument(indexName: string, docTypeName: string, docId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (indexName === null || indexName === undefined) {
            throw new Error('Required parameter indexName was null or undefined when calling getDocument.');
        }
        if (docTypeName === null || docTypeName === undefined) {
            throw new Error('Required parameter docTypeName was null or undefined when calling getDocument.');
        }
        if (docId === null || docId === undefined) {
            throw new Error('Required parameter docId was null or undefined when calling getDocument.');
        }

        let headers = this.defaultHeaders;
        // authentication (authToken) required
        if (this.configuration.apiKeys["auth_token"]) {
            queryParameters = queryParameters.set('auth_token', this.configuration.apiKeys["auth_token"]);
        }

        // authentication (readAppID) required
        if (this.configuration.apiKeys["X-RSearch-App-ID"]) {
            headers = headers.set('X-RSearch-App-ID', this.configuration.apiKeys["X-RSearch-App-ID"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<InlineResponse2005>(`${this.basePath}/indexes/${encodeURIComponent(String(indexName))}/document_types/${encodeURIComponent(String(docTypeName))}/documents/${encodeURIComponent(String(docId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Checks whether &#x60;document_type&#x60; in &#x60;index_name&#x60; exists
     * @param indexName Name of the index
     * @param docTypeName Name of the document_type
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getDocumentType(indexName: string, docTypeName: string, observe?: 'body', reportProgress?: boolean): Observable<InlineResponse2003>;
    public getDocumentType(indexName: string, docTypeName: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse2003>>;
    public getDocumentType(indexName: string, docTypeName: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse2003>>;
    public getDocumentType(indexName: string, docTypeName: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (indexName === null || indexName === undefined) {
            throw new Error('Required parameter indexName was null or undefined when calling getDocumentType.');
        }
        if (docTypeName === null || docTypeName === undefined) {
            throw new Error('Required parameter docTypeName was null or undefined when calling getDocumentType.');
        }

        let headers = this.defaultHeaders;
        // authentication (authToken) required
        if (this.configuration.apiKeys["auth_token"]) {
            queryParameters = queryParameters.set('auth_token', this.configuration.apiKeys["auth_token"]);
        }

        // authentication (readAppID) required
        if (this.configuration.apiKeys["X-RSearch-App-ID"]) {
            headers = headers.set('X-RSearch-App-ID', this.configuration.apiKeys["X-RSearch-App-ID"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<InlineResponse2003>(`${this.basePath}/indexes/${encodeURIComponent(String(indexName))}/document_types/${encodeURIComponent(String(docTypeName))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Checks whether &#x60;a particular index&#x60; {index_name} exists
     * @param indexName Name of the index
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getIndex(indexName: string, observe?: 'body', reportProgress?: boolean): Observable<InlineResponse2001>;
    public getIndex(indexName: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse2001>>;
    public getIndex(indexName: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse2001>>;
    public getIndex(indexName: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (indexName === null || indexName === undefined) {
            throw new Error('Required parameter indexName was null or undefined when calling getIndex.');
        }

        let headers = this.defaultHeaders;

        // authentication (authToken) required
        if (this.configuration.apiKeys["auth_token"]) {
            queryParameters = queryParameters.set('auth_token', this.configuration.apiKeys["auth_token"]);
        }

        // authentication (readAppID) required
        if (this.configuration.apiKeys["X-RSearch-App-ID"]) {
            headers = headers.set('X-RSearch-App-ID', this.configuration.apiKeys["X-RSearch-App-ID"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<InlineResponse2001>(`${this.basePath}/indexes/${encodeURIComponent(String(indexName))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Basic Search - Gets Suggestions from &#x60;doc_type_name&#x60; in &#x60;index_name&#x60;
     * @param indexName Name of the index
     * @param docTypeName Name of the Document_type
     * @param q Details of the suggest query
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSuggestResults(indexName: string, docTypeName: string, q: string, observe?: 'body', reportProgress?: boolean): Observable<InlineResponse2009>;
    public getSuggestResults(indexName: string, docTypeName: string, q: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse2009>>;
    public getSuggestResults(indexName: string, docTypeName: string, q: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse2009>>;
    public getSuggestResults(indexName: string, docTypeName: string, q: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (indexName === null || indexName === undefined) {
            throw new Error('Required parameter indexName was null or undefined when calling getSuggestResults.');
        }
        if (docTypeName === null || docTypeName === undefined) {
            throw new Error('Required parameter docTypeName was null or undefined when calling getSuggestResults.');
        }
        if (q === null || q === undefined) {
            throw new Error('Required parameter q was null or undefined when calling getSuggestResults.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (q !== undefined) {
            queryParameters = queryParameters.set('q', <any>q);
        }

        let headers = this.defaultHeaders;

        // authentication (authToken) required
        if (this.configuration.apiKeys["auth_token"]) {
            queryParameters = queryParameters.set('auth_token', this.configuration.apiKeys["auth_token"]);
        }

        // authentication (readAppID) required
        if (this.configuration.apiKeys["X-RSearch-App-ID"]) {
            headers = headers.set('X-RSearch-App-ID', this.configuration.apiKeys["X-RSearch-App-ID"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<InlineResponse2009>(`${this.basePath}/indexes/${encodeURIComponent(String(indexName))}/document_types/${encodeURIComponent(String(docTypeName))}/suggest`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
